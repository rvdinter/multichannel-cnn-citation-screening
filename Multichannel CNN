{"nbformat":4,"nbformat_minor":0,"metadata":{"accelerator":"GPU","colab":{"name":"Multichannel CNN","provenance":[],"collapsed_sections":[]},"kernelspec":{"display_name":"Python 3","name":"python3"}},"cells":[{"cell_type":"code","metadata":{"id":"z40fumheLRFs"},"source":["from google.colab import drive\n","drive.mount('/gdrive')\n","%cd /gdrive/'My Drive'/'Multichannel CNN'"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"C2n-7kt0Ju9g","executionInfo":{"status":"ok","timestamp":1613549801088,"user_tz":-60,"elapsed":3609,"user":{"displayName":"Raymon Games","photoUrl":"","userId":"06833819879233343486"}}},"source":["import tensorflow as tf\n","import pandas as pd\n","from preprocessing import Preprocessor\n","from model import multichannel_cnn\n","from sklearn.model_selection import StratifiedKFold\n","import os"],"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"id":"zXiXCw-NMSb4","executionInfo":{"status":"ok","timestamp":1613549801089,"user_tz":-60,"elapsed":3602,"user":{"displayName":"Raymon Games","photoUrl":"","userId":"06833819879233343486"}}},"source":["sheets = {\n","    'datasets/epc-ir.xlsx': ['Statins','ProtonPumpInhibitors', 'UrinaryIncontinence', 'Triptans', 'SkeletalMuscleRelaxants', 'Opiods',\n","                             'OralHypoglycemics', 'CalciumChannelBlockers', 'Estrogens',\n","                             'NSAIDS', 'BetaBlockers', 'Antihistamines', 'AtypicalAntipsychotics', 'ACEInhibitors',\n","                             'ADHD'],   # \n","          'datasets/13643_2016_263_MOESM1_ESM.xlsx': ['BPA', 'Fluoride', 'PFOS-PFOA','Neuropain','Transgenerational']\n","          \n","    }  # '\n","test_metrics = ['test_wss', 'test_wss_95']\n","buffer_size = 512\n","batch_size = 100 \n","epochs = 15 \n","seeds = [60, 55, 98, 27, 36, 44, 72, 67, 3, 42]"],"execution_count":4,"outputs":[]},{"cell_type":"code","metadata":{"id":"TUp93qKCp-hW","executionInfo":{"status":"ok","timestamp":1613549801090,"user_tz":-60,"elapsed":3596,"user":{"displayName":"Raymon Games","photoUrl":"","userId":"06833819879233343486"}}},"source":["def init_gpu():\n","    gpus = tf.config.experimental.list_physical_devices('GPU')\n","    print('GPUs on system: ', gpus)\n","    tf.config.experimental.set_memory_growth(gpus[0], True)\n","    tf.keras.backend.clear_session()"],"execution_count":5,"outputs":[]},{"cell_type":"code","metadata":{"id":"Mi0kQERvMc7-"},"source":["init_gpu()\n","\n","preprocessor = Preprocessor()\n","keyedvectors = preprocessor.get_embedding_model()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"TzSED7Nv-a4j","executionInfo":{"status":"ok","timestamp":1613549841619,"user_tz":-60,"elapsed":44097,"user":{"displayName":"Raymon Games","photoUrl":"","userId":"06833819879233343486"}}},"source":["# %load_ext tensorboard\n","# %tensorboard --logdir logs"],"execution_count":8,"outputs":[]},{"cell_type":"code","metadata":{"id":"g5q74G3BSvRr"},"source":["for path, sheets_f in sheets.items():\n","    for sheet in sheets_f:\n","        print(\"--- {} - {} ---\".format(path, sheet))\n","        df, steps_per_epoch = preprocessor.load_clean_dataset(path, sheet, batch_size)\n","        preprocessor._create_embedding_matrix(sheet)\n","        results = []\n","\n","        for seed_index, seed in enumerate(seeds):\n","            print('--- Seed: {} ---'.format(seed_index))\n","            k_fold = StratifiedKFold(n_splits=2, random_state=seed, shuffle=True)\n","            k_fold_iter = 0\n","            for train_indices, test_indices in k_fold.split(df['text'], df['label']):\n","                tf.keras.backend.clear_session()\n","                train, test, val = preprocessor.split_df_to_balanced_encoded_dataset(df, train_indices, test_indices, seed, buffer_size, batch_size)\n","\n","                model = multichannel_cnn(sheet)\n","\n","                # logdir = os.path.join(\"logs\", datetime.datetime.now().strftime(\"%Y%m%d-%H%M%S\"))\n","                # tensorboard_callback = tf.keras.callbacks.TensorBoard(logdir, histogram_freq=1)\n","\n","                history = model.fit(train, steps_per_epoch=steps_per_epoch, epochs=epochs,\n","                                    validation_data=val, verbose=2)\n","                evaluate = dict(zip(test_metrics, model.evaluate(test)))\n","                results.append(\n","                    {'sheet': sheet, 'seed': seed, 'k_fold_iter': k_fold_iter,\n","                    **history.history, **evaluate})\n","                k_fold_iter += 1\n","        results_df = pd.DataFrame(results)\n","        results_df.to_excel('output/' + sheet + '.xlsx')"],"execution_count":null,"outputs":[]}]}